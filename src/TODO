### Prio 1 ###

more accurate problem infos

processID/convertID/... eindeutig berechnen ... müsste so funktionieren


### Prio 2 ###

save last options as user profile
use qt animations
cdtext
optimize profiles
make converted files wait for applying album gain
ReplayGainScanner: Drag'n'Drop ... verbesserungswürdig, funktioniert aber grundsätzlich
ReplayGainScanner: split album through context menu
ReplayGainScanner: split albums by disc
edit ripper parameters
edit encoder parameters [/]
ReplayGainScanner: parallele Berechnung
changing default decoder only takes effect after restart

### Prio 3 ###

better ripping control


### Plugins ###
[x] faac
[x] ffmpeg
[x] flac
[x] lame
[x] mplayer
[x] neroaac
[x] timidity
[x] fluidsynth
[x] vorbistools
[x] twolame
[ ] gogo
[x] musepack
[ ] mpc123
[>] aften
[x] flake
[x] mac
[x] shorten
[ ] tta
[ ] bonk
[ ] optimfrog
[x] wavpack
[ ] lac
[ ] lpac
[x] speex
[>] sox
[ ] gstreamer
[ ] phonon?

[x] aacgain
[x] metaflac
[x] mp3gain
[x] vorbisgain
[x] wvgain
[x] replaygain

[x] cdparanoia
[>] cdda2wav


### Code ###

KShell::quoteArg

### main.cpp ###

signal( SIGQUIT, cleanup );
signal( SIGINT, cleanup );

void cleanup( int )
{
    kDebug(5970) << i18n("Just caught a software interrupt.");
    kapp->exit();
}


Create a named pipe called pipe.wav
#: mkfifo pipe.wav

Now execute the following command. It will hang, as it is waiting for the data to flow through the pipe.
#: lame --preset standard pipe.wav output.file

In a different terminal, execute the following command, to get the data flowing.
#: mplayer -ao pcm:file=pipe.wav input.file


QFile debugfile("/dev/shm/soundKonverter");
if( debugfile.open(QIODevice::Append|QIODevice::Text) )
{
    QTextStream debugstream(&debugfile);
    debugstream << "type: " << storageVolume->fsType() << "\n";
    debugfile.close();
}

###
